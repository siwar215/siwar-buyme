{"name": "test_if_email_valid", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=112.0.5615.49)\nStacktrace:\n0   chromedriver                        0x0000000103140ae8 chromedriver + 4958952\n1   chromedriver                        0x00000001031387b3 chromedriver + 4925363\n2   chromedriver                        0x0000000102cfa1d6 chromedriver + 475606\n3   chromedriver                        0x0000000102ccfcec chromedriver + 302316\n4   chromedriver                        0x0000000102d68f2f chromedriver + 929583\n5   chromedriver                        0x0000000102d7e926 chromedriver + 1018150\n6   chromedriver                        0x0000000102d639e3 chromedriver + 907747\n7   chromedriver                        0x0000000102d2daef chromedriver + 686831\n8   chromedriver                        0x0000000102d2f00e chromedriver + 692238\n9   chromedriver                        0x00000001030fc9ad chromedriver + 4680109\n10  chromedriver                        0x0000000103101c12 chromedriver + 4701202\n11  chromedriver                        0x000000010310879f chromedriver + 4728735\n12  chromedriver                        0x0000000103102b7a chromedriver + 4705146\n13  chromedriver                        0x00000001030d527e chromedriver + 4518526\n14  chromedriver                        0x0000000103122908 chromedriver + 4835592\n15  chromedriver                        0x0000000103122a87 chromedriver + 4835975\n16  chromedriver                        0x000000010313200f chromedriver + 4898831\n17  libsystem_pthread.dylib             0x00007ff8116fb1d3 _pthread_start + 125\n18  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15", "trace": "self = <pages.registration_screen.Registration object at 0x7fc868c0a670>, locator = ('xpath', \"//input[@placeholder='שם פרטי']\"), text = 'Siwar'\n\n    def wait_and_enter_text(self, locator, text):\n        try:\n>           self.wait.until(EC.presence_of_element_located(locator)).send_keys(text)\n\npages/base_page.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6ddb49f7447b9aea79a188f3b18bf6e3\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7fc868ba54c0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ddb49f7447b9aea79a188f3b18bf6e3\")>\n\n    def _predicate(driver):\n>       return driver.find_element(*locator)\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/support/expected_conditions.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ddb49f7447b9aea79a188f3b18bf6e3\")>, by = 'xpath', value = \"//input[@placeholder='שם פרטי']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:861: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6ddb49f7447b9aea79a188f3b18bf6e3\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//input[@placeholder='שם פרטי']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc868be0e80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff8116fb1d3 _pthread_start + 125\\\\n18  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=112.0.5615.49)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103140ae8 chromedriver + 4958952\nE       1   chromedriver                        0x00000001031387b3 chromedriver + 4925363\nE       2   chromedriver                        0x0000000102cfa1d6 chromedriver + 475606\nE       3   chromedriver                        0x0000000102ccfcec chromedriver + 302316\nE       4   chromedriver                        0x0000000102d68f2f chromedriver + 929583\nE       5   chromedriver                        0x0000000102d7e926 chromedriver + 1018150\nE       6   chromedriver                        0x0000000102d639e3 chromedriver + 907747\nE       7   chromedriver                        0x0000000102d2daef chromedriver + 686831\nE       8   chromedriver                        0x0000000102d2f00e chromedriver + 692238\nE       9   chromedriver                        0x00000001030fc9ad chromedriver + 4680109\nE       10  chromedriver                        0x0000000103101c12 chromedriver + 4701202\nE       11  chromedriver                        0x000000010310879f chromedriver + 4728735\nE       12  chromedriver                        0x0000000103102b7a chromedriver + 4705146\nE       13  chromedriver                        0x00000001030d527e chromedriver + 4518526\nE       14  chromedriver                        0x0000000103122908 chromedriver + 4835592\nE       15  chromedriver                        0x0000000103122a87 chromedriver + 4835975\nE       16  chromedriver                        0x000000010313200f chromedriver + 4898831\nE       17  libsystem_pthread.dylib             0x00007ff8116fb1d3 _pthread_start + 125\nE       18  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:249: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <main_test_register.TestRegistration testMethod=test_if_email_valid>\n\n    def test_if_email_valid(self):\n        self.register_page.goto_link(self.cfg['url']['buymehomepage'])\n        self.register_page.click_on_login_button()\n        self.register_page.click_on_register()\n>       self.register_page.if_email_valid()\n\nmain_test_register.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/registration_screen.py:55: in if_email_valid\n    BasePage.wait_and_enter_text(self, Constants.register_first_name, \"Siwar\")\npages/base_page.py:49: in wait_and_enter_text\n    ss_png = self.driver.get_screenshot_as_png()\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:965: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:977: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc868be0e80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff8116fb1d3 _pthread_start + 125\\\\n18  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=112.0.5615.49)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000103140ae8 chromedriver + 4958952\nE       1   chromedriver                        0x00000001031387b3 chromedriver + 4925363\nE       2   chromedriver                        0x0000000102cfa1d6 chromedriver + 475606\nE       3   chromedriver                        0x0000000102ccfcec chromedriver + 302316\nE       4   chromedriver                        0x0000000102d68f2f chromedriver + 929583\nE       5   chromedriver                        0x0000000102d7e926 chromedriver + 1018150\nE       6   chromedriver                        0x0000000102d639e3 chromedriver + 907747\nE       7   chromedriver                        0x0000000102d2daef chromedriver + 686831\nE       8   chromedriver                        0x0000000102d2f00e chromedriver + 692238\nE       9   chromedriver                        0x00000001030fc9ad chromedriver + 4680109\nE       10  chromedriver                        0x0000000103101c12 chromedriver + 4701202\nE       11  chromedriver                        0x000000010310879f chromedriver + 4728735\nE       12  chromedriver                        0x0000000103102b7a chromedriver + 4705146\nE       13  chromedriver                        0x00000001030d527e chromedriver + 4518526\nE       14  chromedriver                        0x0000000103122908 chromedriver + 4835592\nE       15  chromedriver                        0x0000000103122a87 chromedriver + 4835975\nE       16  chromedriver                        0x000000010313200f chromedriver + 4898831\nE       17  libsystem_pthread.dylib             0x00007ff8116fb1d3 _pthread_start + 125\nE       18  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:249: NoSuchWindowException"}, "attachments": [{"name": "Screenshot", "source": "c6ff914f-574f-40d3-a64b-70a8a9168a32-attachment.png", "type": "image/png"}, {"name": "Screenshot", "source": "aba5c8aa-daea-4fae-be85-f2e9ca92f797-attachment.png", "type": "image/png"}, {"name": "Screenshot", "source": "d8a8fc37-4e36-4c4b-a4b4-913000e4a7a7-attachment.png", "type": "image/png"}, {"name": "log", "source": "8c9057e4-6a5f-4de6-9008-170258e13268-attachment.txt", "type": "text/plain"}], "start": 1681413148933, "stop": 1681413200409, "uuid": "cf277489-6918-43df-9b03-a3ea80e20796", "historyId": "98332003631963a9ec2e8713d19af230", "testCaseId": "aa87b5e7a8f4c5e46a927ccd0883a71f", "fullName": "main_test_register.TestRegistration#test_if_email_valid", "labels": [{"name": "suite", "value": "main_test_register"}, {"name": "subSuite", "value": "TestRegistration"}, {"name": "host", "value": "Siwars-MacBook-Pro.local"}, {"name": "thread", "value": "25802-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main_test_register"}]}