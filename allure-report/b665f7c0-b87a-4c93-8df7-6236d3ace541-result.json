{"name": "test_a_success_register", "status": "broken", "statusDetails": {"message": "AttributeError: 'NoneType' object has no attribute 'encode'", "trace": "self = <pages.registration_screen.Registration object at 0x7f82a867f700>, link = 'https://buyme.co.il'\n\n    def goto_link(self, link):\n        # This function navigates to a given URL using Selenium WebDriver, waits for the page to load, and captures a\n        # screenshot of the page in case of any exceptions for logging or reporting purposes.\n        try:\n>           self.driver.get(link)\n\npages/base_page.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7a7212cbbcd1c3ed6f1da546163fccdc\")>, url = 'https://buyme.co.il'\n\n    def get(self, url: str) -> None:\n        \"\"\"\n        Loads a web page in the current browser session.\n        \"\"\"\n>       self.execute(Command.GET, {\"url\": url})\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7a7212cbbcd1c3ed6f1da546163fccdc\")>, driver_command = 'get', params = {'url': 'https://buyme.co.il'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f82a865ffd0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...ff8116fb1d3 _pthread_start + 125\\\\n25  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from target frame detached\nE         (Session info: chrome=112.0.5615.121)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010310cae8 chromedriver + 4958952\nE       1   chromedriver                        0x00000001031047b3 chromedriver + 4925363\nE       2   chromedriver                        0x0000000102cc6051 chromedriver + 475217\nE       3   chromedriver                        0x0000000102cadfbf chromedriver + 376767\nE       4   chromedriver                        0x0000000102cac81a chromedriver + 370714\nE       5   chromedriver                        0x0000000102cacd4c chromedriver + 372044\nE       6   chromedriver                        0x0000000102cbc0e0 chromedriver + 434400\nE       7   chromedriver                        0x0000000102cbd412 chromedriver + 439314\nE       8   chromedriver                        0x0000000102cced74 chromedriver + 511348\nE       9   chromedriver                        0x0000000102cd42fb chromedriver + 533243\nE       10  chromedriver                        0x0000000102cad1a8 chromedriver + 373160\nE       11  chromedriver                        0x0000000102ccea63 chromedriver + 510563\nE       12  chromedriver                        0x0000000102d4b4a4 chromedriver + 1021092\nE       13  chromedriver                        0x0000000102d2f9e3 chromedriver + 907747\nE       14  chromedriver                        0x0000000102cf9aef chromedriver + 686831\nE       15  chromedriver                        0x0000000102cfb00e chromedriver + 692238\nE       16  chromedriver                        0x00000001030c89ad chromedriver + 4680109\nE       17  chromedriver                        0x00000001030cdc12 chromedriver + 4701202\nE       18  chromedriver                        0x00000001030d479f chromedriver + 4728735\nE       19  chromedriver                        0x00000001030ceb7a chromedriver + 4705146\nE       20  chromedriver                        0x00000001030a127e chromedriver + 4518526\nE       21  chromedriver                        0x00000001030ee908 chromedriver + 4835592\nE       22  chromedriver                        0x00000001030eea87 chromedriver + 4835975\nE       23  chromedriver                        0x00000001030fe00f chromedriver + 4898831\nE       24  libsystem_pthread.dylib             0x00007ff8116fb1d3 _pthread_start + 125\nE       25  libsystem_pthread.dylib             0x00007ff8116f6bd3 thread_start + 15\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:249: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.main_test_register.TestRegistration testMethod=test_a_success_register>\n\n    def test_a_success_register(self):\n>       self.register_page.goto_link(self.cfg['url']['buymehomepage'])\n\ntests/main_test_register.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:41: in goto_link\n    ss_png = self.driver.get_screenshot_as_png()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7a7212cbbcd1c3ed6f1da546163fccdc\")>\n\n    def get_screenshot_as_png(self) -> bytes:\n        \"\"\"\n        Gets the screenshot of the current window as a binary data.\n    \n        :Usage:\n            ::\n    \n                driver.get_screenshot_as_png()\n        \"\"\"\n>       return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nE       AttributeError: 'NoneType' object has no attribute 'encode'\n\n../../Library/Caches/pypoetry/virtualenvs/siwar-buyme-Vqth1sGJ-py3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:965: AttributeError"}, "attachments": [{"name": "log", "source": "a931525c-4d69-4989-96ad-76874be9aaa2-attachment.txt", "type": "text/plain"}], "start": 1681673860726, "stop": 1681673881978, "uuid": "0645a07a-aa3a-41e0-a0e4-81d14bae54cb", "historyId": "7d29ee78b3a77ad8dd971a51fa10f7e1", "testCaseId": "0dd7841d29448254046bf9742bd9d5bc", "fullName": "main.TestRegistration#test_a_success_register", "labels": [{"name": "suite", "value": "main"}, {"name": "subSuite", "value": "TestRegistration"}, {"name": "host", "value": "Siwars-MBP"}, {"name": "thread", "value": "58891-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main"}]}